diff --git a/SingleSource/Regression/C/gcc-c-torture/execute/pr63302.c b/SingleSource/Regression/C/gcc-c-torture/execute/pr63302.c
index 06a82af0..b939fc87 100644
--- a/SingleSource/Regression/C/gcc-c-torture/execute/pr63302.c
+++ b/SingleSource/Regression/C/gcc-c-torture/execute/pr63302.c
@@ -1,60 +1,62 @@
-/* PR tree-optimization/63302 */
+// /* PR tree-optimization/63302 */
+//
+// #ifdef __SIZEOF_INT128__
+// #if __SIZEOF_INT128__ * __CHAR_BIT__ == 128
+// #define USE_INT128
+// #endif
+// #endif
+// #if __SIZEOF_LONG_LONG__ * __CHAR_BIT__ == 64
+// #define USE_LLONG
+// #endif
+//
+// #ifdef USE_INT128
+// __attribute__((noinline, noclone)) int
+// foo (__int128 x)
+// {
+//   __int128 v = x & (((__int128) -1 << 63) | 0x7ff);
+//
+//   return v == 0 || v == ((__int128) -1 << 63);
+// }
+// #endif
+//
+// #ifdef USE_LLONG
+// __attribute__((noinline, noclone)) int
+// bar (long long x)
+// {
+//   long long v = x & (((long long) -1 << 31) | 0x7ff);
+//
+//   return v == 0 || v == ((long long) -1 << 31);
+// }
+// #endif
+//
+// int
+// main ()
+// {
+// #ifdef USE_INT128
+//   if (foo (0) != 1
+//       || foo (1) != 0
+//       || foo (0x800) != 1
+//       || foo (0x801) != 0
+//       || foo ((__int128) 1 << 63) != 0
+//       || foo ((__int128) -1 << 63) != 1
+//       || foo (((__int128) -1 << 63) | 1) != 0
+//       || foo (((__int128) -1 << 63) | 0x800) != 1
+//       || foo (((__int128) -1 << 63) | 0x801) != 0)
+//     __builtin_abort ();
+// #endif
+// #ifdef USE_LLONG
+//   if (bar (0) != 1
+//       || bar (1) != 0
+//       || bar (0x800) != 1
+//       || bar (0x801) != 0
+//       || bar (1LL << 31) != 0
+//       || bar (-1LL << 31) != 1
+//       || bar ((-1LL << 31) | 1) != 0
+//       || bar ((-1LL << 31) | 0x800) != 1
+//       || bar ((-1LL << 31) | 0x801) != 0)
+//     __builtin_abort ();
+// #endif
+//   return 0;
+// }
 
-#ifdef __SIZEOF_INT128__
-#if __SIZEOF_INT128__ * __CHAR_BIT__ == 128
-#define USE_INT128
-#endif
-#endif
-#if __SIZEOF_LONG_LONG__ * __CHAR_BIT__ == 64
-#define USE_LLONG
-#endif
-
-#ifdef USE_INT128
-__attribute__((noinline, noclone)) int
-foo (__int128 x)
-{
-  __int128 v = x & (((__int128) -1 << 63) | 0x7ff);
-
-  return v == 0 || v == ((__int128) -1 << 63);
-}
-#endif
-
-#ifdef USE_LLONG
-__attribute__((noinline, noclone)) int
-bar (long long x)
-{
-  long long v = x & (((long long) -1 << 31) | 0x7ff);
-
-  return v == 0 || v == ((long long) -1 << 31);
-}
-#endif
-
-int
-main ()
-{
-#ifdef USE_INT128
-  if (foo (0) != 1
-      || foo (1) != 0
-      || foo (0x800) != 1
-      || foo (0x801) != 0
-      || foo ((__int128) 1 << 63) != 0
-      || foo ((__int128) -1 << 63) != 1
-      || foo (((__int128) -1 << 63) | 1) != 0
-      || foo (((__int128) -1 << 63) | 0x800) != 1
-      || foo (((__int128) -1 << 63) | 0x801) != 0)
-    __builtin_abort ();
-#endif
-#ifdef USE_LLONG
-  if (bar (0) != 1
-      || bar (1) != 0
-      || bar (0x800) != 1
-      || bar (0x801) != 0
-      || bar (1LL << 31) != 0
-      || bar (-1LL << 31) != 1
-      || bar ((-1LL << 31) | 1) != 0
-      || bar ((-1LL << 31) | 0x800) != 1
-      || bar ((-1LL << 31) | 0x801) != 0)
-    __builtin_abort ();
-#endif
-  return 0;
-}
+int main() {}
\ No newline at end of file
diff --git a/cmake/caches/baseline.cmake b/cmake/caches/baseline.cmake
new file mode 100644
index 00000000..7bcdf489
--- /dev/null
+++ b/cmake/caches/baseline.cmake
@@ -0,0 +1,6 @@
+# Lowest optimization level and maximum debug information; A typical developer
+# configuration.
+set(CMAKE_BUILD_TYPE "Release" CACHE STRING "")
+set(CMAKE_C_FLAGS_RELEASE "-O3 -fstack-usage" CACHE STRING "")
+set(CMAKE_CXX_FLAGS_RELEASE "-O3 -fstack-usage" CACHE STRING "")
+set(TEST_SUITE_SUBDIRS "SingleSource" CACHE STRING "")
diff --git a/cmake/caches/wdsymys.cmake b/cmake/caches/wdsymys.cmake
new file mode 100644
index 00000000..49fbcac9
--- /dev/null
+++ b/cmake/caches/wdsymys.cmake
@@ -0,0 +1,5 @@
+set(OPTFLAGS "-O3 -fpass-plugin=/home/aidan/code/cse-583/wdsymys/build/wdsymys/WDSYMYS.so -fstack-usage")
+set(CMAKE_C_FLAGS_RELEASE "${OPTFLAGS}" CACHE STRING "")
+set(CMAKE_CXX_FLAGS_RELEASE "${OPTFLAGS}" CACHE STRING "")
+set(CMAKE_BUILD_TYPE "Release" CACHE STRING "")
+set(TEST_SUITE_SUBDIRS "SingleSource" CACHE STRING "")
diff --git a/compare_runtimes.py b/compare_runtimes.py
new file mode 100644
index 00000000..cdcc7304
--- /dev/null
+++ b/compare_runtimes.py
@@ -0,0 +1,39 @@
+import utils.compare
+import matplotlib.pyplot as plt
+import plot_theme
+import seaborn as sns
+import pandas as pd
+import numpy as np
+
+baseline_df = utils.compare.read_lit_json("build-baseline/results.json").sort_values("hash")
+wdsymys_df = utils.compare.read_lit_json("build-wdsymys/results.json").sort_values("hash")
+
+baseline_df = baseline_df.loc[wdsymys_df.index]
+
+comparison_df = pd.DataFrame({
+    "symbol": wdsymys_df.index,
+    "baseline_time": baseline_df["exec_time"],
+    "wdsymys_time": wdsymys_df["exec_time"],
+    "baseline_text_size": baseline_df["size..text"],
+    "wdsymys_text_size": wdsymys_df["size..text"],
+})
+
+
+comparison_df["delta_time"] = comparison_df["wdsymys_time"] - comparison_df["baseline_time"]
+comparison_df["delta_text_size"] = comparison_df["wdsymys_text_size"] - comparison_df["baseline_text_size"]
+comparison_df["delta_time_percent"] = comparison_df["delta_time"] / comparison_df["baseline_time"] * 100
+comparison_df["delta_text_size_percent"] = comparison_df["delta_text_size"] / comparison_df["baseline_text_size"] * 100
+
+comparison_df["delta_time_percent"] = np.where(comparison_df["baseline_time"] == 0, 0, comparison_df["delta_time_percent"])
+
+print(comparison_df.sort_values("delta_time_percent"))
+
+fig, (ax1, ax2) = plt.subplots(2, 1)
+
+sns.boxplot(comparison_df["delta_time_percent"], orient="h", ax=ax1)
+ax1.set_xlabel("Change in execution time [%]")
+
+sns.boxplot(comparison_df["delta_text_size_percent"], orient="h", ax=ax2)
+ax2.set_xlabel("Change in code size [%]")
+
+plt.show()
diff --git a/compare_stack_usage.py b/compare_stack_usage.py
new file mode 100644
index 00000000..21622643
--- /dev/null
+++ b/compare_stack_usage.py
@@ -0,0 +1,53 @@
+import pandas as pd
+import matplotlib.pyplot as plt
+import seaborn as sns
+import numpy as np
+import plot_theme
+
+PLOT_WIDTH = 1
+BIN_SIZE = 0.01
+
+wdsymys_df = pd.read_csv('build-wdsymys/stack_usage.txt', sep="\t", names=["symbol", "size", "class"], index_col="symbol")
+baseline_df = pd.read_csv('build-baseline/stack_usage.txt', sep="\t", names=["symbol", "size", "class"], index_col="symbol")
+
+print(baseline_df)
+print(wdsymys_df)
+
+baseline_df = baseline_df.loc[wdsymys_df.index]
+
+comparison_df = pd.DataFrame({
+    "symbol": wdsymys_df.index,
+    "baseline_size": baseline_df["size"],
+    "wdsymys_size": wdsymys_df["size"],
+})
+
+comparison_df["delta_size"] = comparison_df["wdsymys_size"] - comparison_df["baseline_size"]
+comparison_df["delta_percent"] = comparison_df["delta_size"] / comparison_df["baseline_size"] * 100
+comparison_df = comparison_df[comparison_df["baseline_size"] != 0]
+
+print(comparison_df.sort_values("delta_percent"))
+
+fig = plt.figure()
+ax1 = plt.subplot(211)
+ax2 = plt.subplot(212, sharex=ax1)
+counts, bins = np.histogram(comparison_df["delta_percent"], bins=np.arange(-PLOT_WIDTH, PLOT_WIDTH + BIN_SIZE, BIN_SIZE))
+ax1.bar(bins[:-1] + (BIN_SIZE / 2), counts / np.sum(counts), width=BIN_SIZE)
+ax1.axvline(0, c='black')
+ax1.set_ylabel("Frequency")
+# ax1.set_xlabel("Change in stack size [%]")
+# ax1.get_xaxis().set_visible(False)
+
+sns.boxplot(comparison_df["delta_percent"], ax=ax2, orient="h")
+ax2.set_xlabel("Change in stack size [%]")
+ax2.set_xlim(-PLOT_WIDTH, PLOT_WIDTH)
+
+fig.suptitle("Stack size change on LLVM Test Suite")
+
+print(f"made worse: {np.sum(comparison_df["delta_size"] > 0) / len(comparison_df):.4f}")
+print(f"made better: {np.sum(comparison_df["delta_size"] < 0) / len(comparison_df):.4f}")
+
+fig = plt.figure()
+
+plt.scatter(comparison_df["baseline_size"], comparison_df["delta_size"])
+
+plt.show()
\ No newline at end of file
diff --git a/plot_theme.py b/plot_theme.py
new file mode 100644
index 00000000..3c023b57
--- /dev/null
+++ b/plot_theme.py
@@ -0,0 +1,51 @@
+import matplotlib as mpl
+import matplotlib.pyplot as plt
+import matplotlib.font_manager as fm
+
+MICHIGAN_BLUE = '#00274C'
+MICHIGAN_MAIZE = '#FFCB05'
+
+TAPPAN_RED = '#9A3324'
+ROSS_ORANGE = '#D86018'
+WAVE_FIELD_GREEN = '#A5A508'
+A2_AMETHYST = '#702082'
+TAUBMAN_TEAL = '#00B2A9'
+LAW_QUAD_STONE = '#655A52'
+
+ANGELL_HALL_ASH = '#989C97'
+
+PUMA_BLACK = '#131516'
+SOLID_WHITE = '#FFFFFF'
+
+# make black #131516 instead
+mpl.rcParams['text.color'] = PUMA_BLACK
+mpl.rcParams['axes.labelcolor'] = PUMA_BLACK
+mpl.rcParams['xtick.color'] = PUMA_BLACK
+mpl.rcParams['ytick.color'] = PUMA_BLACK
+mpl.rcParams['axes.edgecolor'] = PUMA_BLACK
+mpl.rcParams['axes.facecolor'] = SOLID_WHITE
+
+# set text to Montserrat
+fe = fm.FontEntry(
+    fname='./LibertinusSerif-Regular.ttf',
+    name='Libertinus Serif')
+fm.fontManager.ttflist.insert(0, fe) # or append is fine
+mpl.rcParams['font.family'] = fe.name
+mpl.rcParams['mathtext.fontset'] = 'custom'
+mpl.rcParams['mathtext.it'] = fe.name + ':italic'
+mpl.rcParams['mathtext.bf'] = fe.name + ':italic:bold'
+
+# make lines thicker
+mpl.rcParams['lines.linewidth'] = 2
+
+# makes axes text larger
+mpl.rcParams['axes.labelsize'] = 12
+mpl.rcParams['axes.titlesize'] = 12
+
+# set color palette
+mpl.rcParams['axes.prop_cycle'] = mpl.cycler(color=[MICHIGAN_BLUE, MICHIGAN_MAIZE, TAPPAN_RED, A2_AMETHYST, ROSS_ORANGE])
+
+# turn grid on
+mpl.rcParams['axes.grid'] = True
+# put it behind
+mpl.rcParams['axes.axisbelow'] = True
\ No newline at end of file
diff --git a/test.sh b/test.sh
new file mode 100755
index 00000000..d633ae93
--- /dev/null
+++ b/test.sh
@@ -0,0 +1,12 @@
+#!/bin/zsh
+
+BUILD_DIR=build-$1
+
+cmake --build ../wdsymys/build
+rm -rf ./$BUILD_DIR/*
+cmake -B $BUILD_DIR -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -Ccmake/caches/$1.cmake -DTEST_SUITE_BENCHMARKING_ONLY=ON .
+#cmake -B $BUILD_DIR -DCMAKE_C_COMPILER=/opt/homebrew/opt/llvm/bin/clang -DCMAKE_CXX_COMPILER=/opt/homebrew/opt/llvm/bin/clang++ -Ccmake/caches/$1.cmake -DTEST_SUITE_BENCHMARKING_ONLY=ON -DTEST_SUITE_RUN_BENCHMARKS=OFF .
+cmake --build $BUILD_DIR -j 16
+cd $BUILD_DIR
+grep -E -v "^/" **/*.su | grep "static" > stack_usage.txt
+lit -v -j 10 -o results.json .
